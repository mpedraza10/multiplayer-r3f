/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.15 public/models/hoodieCharacter.glb -o src/components/HoodieCharacter.jsx -r public 
*/

// React imports
import { useEffect, useMemo, useRef, useState } from "react";

// React three fiber imports
import { useGraph } from "@react-three/fiber";

// Drei imports
import { useGLTF, useAnimations } from "@react-three/drei";

// Three stdlib imports
import { SkeletonUtils } from "three-stdlib";

export function HoodieCharacter({
	hairColor = "green",
	topColor = "pink",
	bottomColor = "brown",
	...props
}) {
	const group = useRef();

	// Get everything from glb file
	const { scene, materials, animations } = useGLTF(
		"/models/hoodieCharacter.glb"
	);

	// Skinned meshes cannot be re-used in threejs without cloning them
	const clone = useMemo(() => SkeletonUtils.clone(scene), [scene]);

	// useGraph creates two flat object collections for nodes and materials
	const { nodes } = useGraph(clone);

	const { actions } = useAnimations(animations, group);
	const [animation, setAnimation] = useState("CharacterArmature|Idle");

	useEffect(() => {
		actions[animation].reset().fadeIn(0.5).play();
	}, [animation]);

	return (
		<group ref={group} {...props} dispose={null}>
			<group name="Root_Scene">
				<group name="RootNode">
					<group
						name="CharacterArmature"
						rotation={[-Math.PI / 2, 0, 0]}
						scale={100}
					>
						<primitive object={nodes.Root} />
					</group>
					<group name="Casual_Feet" rotation={[-Math.PI / 2, 0, 0]} scale={100}>
						<skinnedMesh
							name="Casual_Feet_1"
							geometry={nodes.Casual_Feet_1.geometry}
							material={materials.White}
							skeleton={nodes.Casual_Feet_1.skeleton}
						/>
						<skinnedMesh
							name="Casual_Feet_2"
							geometry={nodes.Casual_Feet_2.geometry}
							material={materials.Purple}
							skeleton={nodes.Casual_Feet_2.skeleton}
						/>
					</group>
					<group name="Casual_Legs" rotation={[-Math.PI / 2, 0, 0]} scale={100}>
						<skinnedMesh
							name="Casual_Legs_1"
							geometry={nodes.Casual_Legs_1.geometry}
							material={materials.Skin}
							skeleton={nodes.Casual_Legs_1.skeleton}
						/>
						<skinnedMesh
							name="Casual_Legs_2"
							geometry={nodes.Casual_Legs_2.geometry}
							material={materials.LightBlue}
							skeleton={nodes.Casual_Legs_2.skeleton}
						>
							<meshStandardMaterial color={bottomColor} />
						</skinnedMesh>
					</group>
					<group name="Casual_Head" rotation={[-Math.PI / 2, 0, 0]} scale={100}>
						<skinnedMesh
							name="Casual_Head_1"
							geometry={nodes.Casual_Head_1.geometry}
							material={materials.Skin}
							skeleton={nodes.Casual_Head_1.skeleton}
						/>
						<skinnedMesh
							name="Casual_Head_2"
							geometry={nodes.Casual_Head_2.geometry}
							material={materials.Eyebrows}
							skeleton={nodes.Casual_Head_2.skeleton}
						/>
						<skinnedMesh
							name="Casual_Head_3"
							geometry={nodes.Casual_Head_3.geometry}
							material={materials.Eye}
							skeleton={nodes.Casual_Head_3.skeleton}
						/>
						<skinnedMesh
							name="Casual_Head_4"
							geometry={nodes.Casual_Head_4.geometry}
							material={materials.Hair}
							skeleton={nodes.Casual_Head_4.skeleton}
						>
							<meshStandardMaterial color={hairColor} />
						</skinnedMesh>
					</group>
					<group
						name="Casual_Body"
						position={[0, 0.007, 0]}
						rotation={[-Math.PI / 2, 0, 0]}
						scale={100}
					>
						<skinnedMesh
							name="Casual_Body_1"
							geometry={nodes.Casual_Body_1.geometry}
							material={materials.Purple}
							skeleton={nodes.Casual_Body_1.skeleton}
						>
							<meshStandardMaterial color={topColor} />
						</skinnedMesh>
						<skinnedMesh
							name="Casual_Body_2"
							geometry={nodes.Casual_Body_2.geometry}
							material={materials.Skin}
							skeleton={nodes.Casual_Body_2.skeleton}
						/>
					</group>
				</group>
			</group>
		</group>
	);
}

useGLTF.preload("/models/hoodieCharacter.glb");
